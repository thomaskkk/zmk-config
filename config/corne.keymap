/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        Colemak {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
   &kp ESC   &kp Q   &kp W      &kp F   &kp P    &kp G              &kp J   &kp L      &kp U    &kp Y  &kp SEMI  &kp BSPC
   &kp TAB   &kp A   &kp R      &kp S   &kp T    &kp D              &kp H   &kp N      &kp E    &kp I     &kp O   &kp SQT
 &kp LSHFT   &kp Z   &kp X      &kp C   &kp V    &kp B              &kp K   &kp M  &kp COMMA  &kp DOT  &kp FSLH   &kp ESC
                            &kp LCTRL   &mo 1  &kp RET          &kp SPACE   &mo 2   &kp RALT
            >;
        };

        Numpad {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
 &trans  &trans  &kp HOME    &kp UP     &kp N4  &kp PG_UP          &kp KP_N7  &kp KP_N8  &kp KP_N9    &kp KP_N0  &kp KP_ASTERISK  &kp BSPC
 &trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN          &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS     &kp KP_MINUS    &trans
 &trans  &trans    &trans    &trans     &trans     &trans          &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_DOT    &kp KP_DIVIDE    &trans
                             &trans     &trans     &trans             &trans     &trans     &trans
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
 &trans  &kp EXCL     &kp AT  &kp HASH   &kp DLLR  &kp PRCNT                 &kp CARET           &kp AMPS  &kp ASTERISK  &kp LPAR   &kp RPAR  &kp BSPC
 &trans    &trans  &kp GRAVE    &trans  &kp UNDER   &kp PLUS          &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES        &trans  &kp PIPE  &kp TILDE    &trans
 &trans    &trans     &trans    &trans  &kp MINUS  &kp EQUAL                  &kp LBRC           &kp RBRC      &kp LBKT  &kp RBKT   &kp BSLH    &trans
                                &trans     &trans     &trans                    &trans             &trans        &trans
            >;
        };

        Function {
            bindings = <
 &trans        &kp F1        &kp F2        &kp F3        &kp F4        &kp F5              &kp F6            &kp F7      &kp F8        &kp F9       &kp F10  &kp K_MUTE
 &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4              &trans            &trans      &trans       &kp F11       &kp F12      &trans
 &trans        &trans        &trans        &trans        &trans        &trans          &kp K_PREV  &kp K_PLAY_PAUSE  &kp K_NEXT  &kp K_VOL_DN  &kp K_VOL_UP      &trans
                                           &trans        &trans        &trans              &trans            &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
