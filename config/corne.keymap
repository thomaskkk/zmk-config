/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        tm: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        lt: behavior_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings =
                <&mo>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        game1_layer {
            bindings = <&tog 4>;
            key-positions = <10 34>;
            layers = <0 1 2 3>;
        };

        default_layer {
            bindings = <&to 0>;
            key-positions = <10 34>;
            layers = <4>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            layers = <0 1 2 3>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0 1 2 3>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <4 5>;
            layers = <0 1 2 3>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <28 29>;
            layers = <0 1 2 3>;
        };

        backspace {
            bindings = <&kp BSPC>;
            key-positions = <6 7>;
            layers = <0 1 2 3>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <16 17>;
            layers = <0 1 2 3>;
        };

        enter {
            bindings = <&kp RET>;
            key-positions = <30 31>;
            layers = <0 1 2 3>;
        };

        del2 {
            bindings = <&kp DEL>;
            key-positions = <18 19>;
            layers = <0 1 2 3>;
        };

        caps_lock {
            bindings = <&kp CAPS>;
            key-positions = <5 6>;
            layers = <0 1 2 3>;
        };
    };

    macros {
        spacedqt: spacedqt {
            compatible = "zmk,behavior-macro";
            label = "spacedqt";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp SPACE>;
        };
        spacesqt: spacesqt {
            compatible = "zmk,behavior-macro";
            label = "spacesqt";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SPACE>;
        };
        spacetilde: spacetilde {
            compatible = "zmk,behavior-macro";
            label = "spacetilde";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
        };
        spacecaret: spacecaret {
            compatible = "zmk,behavior-macro";
            label = "spacecaret";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
        };
        spacegrave: spacegrave {
            compatible = "zmk,behavior-macro";
            label = "spacegrave";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Colemak {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Colemak";
            bindings = <
          &kp ESC       &kp Q       &kp W          &kp F        &kp P           &kp G                    &kp J        &kp L         &kp U       &kp Y    &kp SEMI                &kp BSPC
    &hm LCTRL TAB  &hm LGUI A  &hm LALT R    &hm LCTRL S  &hm LSHFT T           &kp D                    &kp H  &hm RSHFT N   &hm RCTRL E  &hm LALT I  &hm RGUI O  &hm RCTRL SINGLE_QUOTE
 &hm LSHIFT PSCRN       &kp Z       &kp X          &kp C        &kp V           &kp B                    &kp K        &kp M     &kp COMMA     &kp DOT    &kp FSLH         &hm RSHIFT CAPS
                                           &tm LCTRL TAB    &lt 1 RET  &tm LSHFT BSPC          &tm RSHFT SPACE    &lt 2 DEL  &tm LALT ESC
            >;
        };

        Numpad {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Numpad";
            bindings = <
 &trans  &kp LC(LGUI)  &kp LC(LG(LEFT))         &kp UP  &kp LC(LG(RIGHT))  &kp PG_UP           &kp PLUS    &kp N7        &kp N8  &kp N9     &kp STAR  &trans
 &trans      &kp LGUI          &kp LEFT       &kp DOWN          &kp RIGHT  &kp PG_DN          &kp MINUS    &kp N4        &kp N5  &kp N6    &kp SLASH  &trans
 &trans  &kp LS(LGUI)         &kp PSCRN  &kp C_AL_CALC           &kp HOME    &kp END             &kp F9    &kp N1        &kp N2  &kp N3  &kp PERCENT  &trans
                                                &trans             &trans     &trans             &trans  &lt 2 N0  &hm LALT DOT
            >;
        };

        Symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Symbols";
            bindings = <
 &trans     &kp EXCL       &kp AT     &kp HASH   &kp DLLR  &kp PRCNT          &kp CARET  &kp AMPS   &kp STAR   &kp LPAR   &kp RPAR  &trans
 &trans  &spacegrave  &spacecaret  &spacetilde  &spacesqt  &spacedqt            &kp DQT   &kp SQT  &kp TILDE  &kp CARET  &kp GRAVE  &trans
 &trans     &kp PIPE    &kp EQUAL     &kp PLUS  &kp MINUS  &kp UNDER           &kp LBRC  &kp RBRC   &kp LBKT   &kp RBKT   &kp BSLH  &trans
                                        &trans     &trans     &trans             &trans    &trans     &trans
            >;
        };

        Function {
            label = "Function";
            bindings = <
 &trans        &kp F1           &kp F2        &kp F3        &kp F4        &kp F5                &kp F6      &kp F7      &kp F8      &kp F9   &kp F10  &trans
 &trans  &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &kp C_VOL_UP       &none       &none     &kp F11   &kp F12  &trans
 &trans       &kp INS  &kp PAUSE_BREAK      &kp CAPS      &kp SLCK    &bt BT_CLR          &kp C_VOL_DN  &kp C_MUTE  &kp C_PREV  &kp C_NEXT  &kp C_PP  &trans
                                              &trans        &trans        &trans                &trans      &trans      &trans
            >;
        };

        Game_1 {
            label = "Game 1";
            bindings = <
 &kp ESC    &kp TAB   &kp Q   &kp W      &kp E      &kp R          &kp NUMBER_1  &kp N2  &kp N3  &kp N4  &kp N5  &trans
  &trans  &kp LSHFT   &kp A   &kp S      &kp D      &kp F                &trans  &trans  &trans  &trans  &trans  &trans
  &trans  &kp LCTRL   &kp Z   &kp X      &kp C      &kp V                &trans  &trans  &trans  &trans  &trans  &trans
                              &sl 5  &kp LCTRL  &kp SPACE                &trans  &trans  &trans
            >;
        };

        Game_2 {
            label = "Game 2";
            bindings = <
 &trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5          &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

&nice_view_spi {
    cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};